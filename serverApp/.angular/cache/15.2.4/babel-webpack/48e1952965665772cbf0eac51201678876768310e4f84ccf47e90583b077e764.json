{"ast":null,"code":"import { catchError, Observable, tap, throwError } from 'rxjs';\nimport { Status } from '../enum/status.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServerService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080';\n    this.servers$ = this.http.get(`${this.apiUrl}/server/list`).pipe(tap(console.log), catchError(this.handleError));\n    this.save$ = server => this.http.post(`${this.apiUrl}/server/save`, server).pipe(tap(console.log), catchError(this.handleError));\n    this.ping$ = ipAddress => this.http.get(`${this.apiUrl}/server/ping${ipAddress}`).pipe(tap(console.log), catchError(this.handleError));\n    this.filter$ = (status, response) => new Observable(subscriber => {\n      console.log(response);\n      subscriber.next(status === Status.ALL ? {\n        ...response,\n        message: `Servers filtered by ${status} status`\n      } : {\n        ...response,\n        message: response.data.servers.filter(server => server.status === status).length > 0 ? `Servers filtered by ${status === Status.SERVER_UP ? 'SERVER UP' : 'SERVER_DOWN '} status` : `No servers of ${status} found`,\n        data: {\n          servers: response.data.servers.filter(server => server.status === status)\n        }\n      });\n      subscriber.complete();\n    }).pipe(tap(console.log), catchError(this.handleError));\n    this.delete$ = serverId => this.http.delete(`${this.apiUrl}/server/delete${serverId}`).pipe(tap(console.log), catchError(this.handleError));\n  }\n  handleError(error) {\n    console.log(error);\n    return throwError(`An error occurred - Error code: ${error.status}`);\n  }\n}\nServerService.ɵfac = function ServerService_Factory(t) {\n  return new (t || ServerService)(i0.ɵɵinject(i1.HttpClient));\n};\nServerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServerService,\n  factory: ServerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAUC,UAAU,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;AAGtE,SAASC,MAAM,QAAQ,qBAAqB;;;AAK5C,OAAM,MAAOC,aAAa;EAExBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADP,WAAM,GAAW,uBAAuB;IAGzD,aAAQ,GACN,IAAI,CAACA,IAAI,CACNC,GAAG,CAAiB,GAAG,IAAI,CAACC,MAAM,cAAc,CAAC,CACjDC,IAAI,CAACR,GAAG,CAACS,OAAO,CAACC,GAAG,CAAC,EAAEZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CACvD;IACD,UAAK,GAAIC,MAAc,IAEnB,IAAI,CAACP,IAAI,CACNQ,IAAI,CAAiB,GAAG,IAAI,CAACN,MAAM,cAAc,EAAEK,MAAM,CAAC,CAC1DJ,IAAI,CAACR,GAAG,CAACS,OAAO,CAACC,GAAG,CAAC,EAAEZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CACvD;IAEH,UAAK,GAAIG,SAAiB,IAEtB,IAAI,CAACT,IAAI,CACNC,GAAG,CAAiB,GAAG,IAAI,CAACC,MAAM,eAAeO,SAAS,EAAE,CAAC,CAC7DN,IAAI,CAACR,GAAG,CAACS,OAAO,CAACC,GAAG,CAAC,EAAEZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CACvD;IAEH,YAAO,GAAG,CAACI,MAAc,EAAEC,QAAwB,KACjD,IAAIjB,UAAU,CAAkBkB,UAAU,IAAI;MAC5CR,OAAO,CAACC,GAAG,CAACM,QAAQ,CAAC;MACrBC,UAAU,CAACC,IAAI,CACbH,MAAM,KAAKb,MAAM,CAACiB,GAAG,GACjB;QAAE,GAAGH,QAAQ;QAAEI,OAAO,EAAE,uBAAuBL,MAAM;MAAS,CAAE,GAChE;QACE,GAAGC,QAAQ;QACXI,OAAO,EACLJ,QAAQ,CAACK,IAAI,CAACC,OAAO,CAACC,MAAM,CACzBX,MAAM,IAAKA,MAAM,CAACG,MAAM,KAAKA,MAAM,CACrC,CAACS,MAAM,GAAG,CAAC,GACR,uBACET,MAAM,KAAKb,MAAM,CAACuB,SAAS,GAAG,WAAW,GAAG,cAC9C,SAAS,GACT,iBAAiBV,MAAM,QAAQ;QACrCM,IAAI,EAAE;UACJC,OAAO,EAAEN,QAAQ,CAACK,IAAI,CAACC,OAAO,CAACC,MAAM,CAClCX,MAAM,IAAKA,MAAM,CAACG,MAAM,KAAKA,MAAM;;OAGzC,CACN;MACDE,UAAU,CAACS,QAAQ,EAAE;IACvB,CAAC,CAAC,CAAClB,IAAI,CAACR,GAAG,CAACS,OAAO,CAACC,GAAG,CAAC,EAAEZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAAC;IAEzD,YAAO,GAAIgB,QAAgB,IAEvB,IAAI,CAACtB,IAAI,CACNuB,MAAM,CAAiB,GAAG,IAAI,CAACrB,MAAM,iBAAiBoB,QAAQ,EAAE,CAAC,CACjEnB,IAAI,CAACR,GAAG,CAACS,OAAO,CAACC,GAAG,CAAC,EAAEZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CACvD;EApDoC;EAsD/BA,WAAWA,CAACkB,KAAwB;IAC1CpB,OAAO,CAACC,GAAG,CAACmB,KAAK,CAAC;IAClB,OAAO5B,UAAU,CAAC,mCAAmC4B,KAAK,CAACd,MAAM,EAAE,CAAC;EACtE;;AA3DWZ,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAA2B,SAAb3B,aAAa;EAAA4B,YAFZ;AAAM","names":["catchError","Observable","tap","throwError","Status","ServerService","constructor","http","get","apiUrl","pipe","console","log","handleError","server","post","ipAddress","status","response","subscriber","next","ALL","message","data","servers","filter","length","SERVER_UP","complete","serverId","delete","error","factory","providedIn"],"sourceRoot":"","sources":["/Users/william/Desktop/prog/youtube/amigosCode/serverProject/serverApp/src/app/service/server.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, filter, Observable, tap, throwError } from 'rxjs';\nimport { CustomResponse } from '../interface/custom-response';\nimport { Server } from '../interface/server';\nimport { Status } from '../enum/status.enum';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServerService {\n  private readonly apiUrl: string = 'http://localhost:8080';\n  constructor(private http: HttpClient) {}\n\n  servers$ = <Observable<CustomResponse>>(\n    this.http\n      .get<CustomResponse>(`${this.apiUrl}/server/list`)\n      .pipe(tap(console.log), catchError(this.handleError))\n  );\n  save$ = (server: Server) =>\n    <Observable<CustomResponse>>(\n      this.http\n        .post<CustomResponse>(`${this.apiUrl}/server/save`, server)\n        .pipe(tap(console.log), catchError(this.handleError))\n    );\n\n  ping$ = (ipAddress: string) =>\n    <Observable<CustomResponse>>(\n      this.http\n        .get<CustomResponse>(`${this.apiUrl}/server/ping${ipAddress}`)\n        .pipe(tap(console.log), catchError(this.handleError))\n    );\n\n  filter$ = (status: Status, response: CustomResponse) =>\n    new Observable<CustomResponse>((subscriber) => {\n      console.log(response);\n      subscriber.next(\n        status === Status.ALL\n          ? { ...response, message: `Servers filtered by ${status} status` }\n          : {\n              ...response,\n              message:\n                response.data.servers.filter(\n                  (server) => server.status === status\n                ).length > 0\n                  ? `Servers filtered by ${\n                      status === Status.SERVER_UP ? 'SERVER UP' : 'SERVER_DOWN '\n                    } status`\n                  : `No servers of ${status} found`,\n              data: {\n                servers: response.data.servers.filter(\n                  (server) => server.status === status\n                ),\n              },\n            }\n      );\n      subscriber.complete();\n    }).pipe(tap(console.log), catchError(this.handleError));\n\n  delete$ = (serverId: number) =>\n    <Observable<CustomResponse>>(\n      this.http\n        .delete<CustomResponse>(`${this.apiUrl}/server/delete${serverId}`)\n        .pipe(tap(console.log), catchError(this.handleError))\n    );\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    console.log(error);\n    return throwError(`An error occurred - Error code: ${error.status}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}